{"version":3,"sources":["turbopack:///[project]/node_modules/next/src/server/route-modules/app-page/module.compiled.js","turbopack:///[project]/node_modules/next/src/server/route-modules/app-page/vendored/ssr/react-jsx-runtime.ts","turbopack:///[project]/node_modules/next/src/server/route-modules/app-page/vendored/ssr/react.ts","turbopack:///[project]/app/contexts/router.context.tsx"],"sourcesContent":["if (process.env.NEXT_RUNTIME === 'edge') {\n  module.exports = require('next/dist/server/route-modules/app-page/module.js')\n} else {\n  if (process.env.__NEXT_EXPERIMENTAL_REACT) {\n    if (process.env.NODE_ENV === 'development') {\n      if (process.env.TURBOPACK) {\n        module.exports = require('next/dist/compiled/next-server/app-page-turbo-experimental.runtime.dev.js')\n      } else {\n        module.exports = require('next/dist/compiled/next-server/app-page-experimental.runtime.dev.js')\n      }\n    } else {\n      if (process.env.TURBOPACK) {\n        module.exports = require('next/dist/compiled/next-server/app-page-turbo-experimental.runtime.prod.js')\n      } else {\n        module.exports = require('next/dist/compiled/next-server/app-page-experimental.runtime.prod.js')\n      }\n    }\n  } else {\n    if (process.env.NODE_ENV === 'development') {\n      if (process.env.TURBOPACK) {\n        module.exports = require('next/dist/compiled/next-server/app-page-turbo.runtime.dev.js')\n      } else {\n        module.exports = require('next/dist/compiled/next-server/app-page.runtime.dev.js')\n      }\n    } else {\n      if (process.env.TURBOPACK) {\n        module.exports = require('next/dist/compiled/next-server/app-page-turbo.runtime.prod.js')\n      } else {\n        module.exports = require('next/dist/compiled/next-server/app-page.runtime.prod.js')\n      }\n    }\n  }\n}\n","module.exports = (\n  require('../../module.compiled') as typeof import('../../module.compiled')\n).vendored['react-ssr']!.ReactJsxRuntime\n","module.exports = (\n  require('../../module.compiled') as typeof import('../../module.compiled')\n).vendored['react-ssr']!.React\n","\"use client\";\nimport React, {\n  createContext,\n  useContext,\n  useEffect,\n  useState,\n  ReactNode,\n} from \"react\";\n\nexport interface RouterInfo {\n  mac?: string;\n  ip?: string;\n  linkOrig?: string;\n}\n\nconst RouterInfoContext = createContext<RouterInfo | undefined>(undefined);\n\ninterface RouterInfoProviderProps {\n  children: ReactNode;\n}\n\nexport const RouterInfoProvider: React.FC<RouterInfoProviderProps> = ({\n  children,\n}) => {\n  const [routerInfo, setRouterInfo] = useState<RouterInfo | null>(null);\n\n  useEffect(() => {\n    // Check if info exists in localStorage first\n    const savedInfo = localStorage.getItem(\"routerInfo\");\n    if (savedInfo) {\n      try {\n        setRouterInfo(JSON.parse(savedInfo));\n        return; // Skip reading URL params if we already have stored info\n      } catch (e) {\n        console.error(\"Failed to parse router info:\", e);\n      }\n    }\n\n    // Extract query params from URL (initial login)\n    const params = new URLSearchParams(window.location.search);\n\n    if (!params.get(\"mac\") || !params.get(\"ip\")) {\n      console.warn(\n        \"No router info in URL\"\n      );\n      return;\n    }\n\n    const info: RouterInfo = {\n      // You can restore your real mac/ip fetching here\n      mac: params.get(\"mac\") || undefined,\n      ip: params.get(\"ip\") || undefined,\n      linkOrig: params.get(\"orig\") || undefined,\n    };\n\n    // Save to state and localStorage\n    setRouterInfo(info);\n    localStorage.setItem(\"routerInfo\", JSON.stringify(info));\n\n    console.log(\"Router info extracted:\", info);\n  }, []);\n\n  // Watch for routerInfo changes and sync to localStorage\n  useEffect(() => {\n    if (routerInfo && Object.keys(routerInfo).length > 0) {\n      localStorage.setItem(\"routerInfo\", JSON.stringify(routerInfo));\n    }\n  }, [routerInfo]);\n\n  return (\n    <RouterInfoContext.Provider value={routerInfo || {}}>\n      {children}\n    </RouterInfoContext.Provider>\n  );\n};\n\nexport const useRouterInfo = (): RouterInfo => {\n  const context = useContext(RouterInfoContext);\n  if (context === undefined) {\n    throw new Error(\"useRouterInfo must be used inside a RouterInfoProvider\");\n  }\n  return context;\n};\n"],"names":["process","env","NEXT_RUNTIME","module","exports","require","__NEXT_EXPERIMENTAL_REACT","NODE_ENV","TURBOPACK","vendored","ReactJsxRuntime","React"],"mappings":"yNA0BQG,GAAOC,OAAO,CAAGC,EAAQ,CAAA,CAAA,IAAA,iCC1BjCF,EAAOC,OAAO,CACZC,EAAQ,CAAA,CAAA,IAAA,GACRI,QAAQ,CAAC,YAAY,CAAEC,eAAe,+BCFxCP,EAAOC,OAAO,CACZC,EAAQ,CAAA,CAAA,IAAA,GACRI,QAAQ,CAAC,YAAY,CAAEE,KAAK,kGCD9B,EAAA,EAAA,CAAA,CAAA,OAcA,IAAM,EAAoB,CAAA,EAAA,EAAA,aAAA,AAAa,OAAyB,GAMnD,EAAwD,CAAC,UACpE,CAAQ,CACT,IACC,GAAM,CAAC,EAAY,EAAc,CAAG,CAAA,EAAA,EAAA,QAAA,AAAQ,EAAoB,MA6ChE,MA3CA,CAAA,EAAA,EAAA,SAAS,AAAT,EAAU,KAER,IAAM,EAAY,aAAa,OAAO,CAAC,cACvC,GAAI,EACF,GAAI,CACF,EAAc,GAFH,EAEQ,KAAK,CAAC,IACzB,MACF,CAAE,CADQ,KACD,EAAG,CACV,QAAQ,KAAK,CAAC,+BAAgC,EAChD,CAIF,CAPqE,GAO/D,EAAS,IAAI,gBAAgB,OAAO,QAAQ,CAAC,MAAM,EAEzD,GAAI,CAAC,EAAO,GAAG,CAAC,QAAU,CAAC,EAAO,GAAG,CAAC,MAAO,YAC3C,QAAQ,IAAI,CACV,yBAKJ,IAAM,EAAmB,CAEvB,IAAK,EAAO,GAAG,CAAC,aAAU,EAC1B,GAAI,EAAO,GAAG,CAAC,YAAS,EACxB,SAAU,EAAO,GAAG,CAAC,cAAW,CAClC,EAGA,EAAc,GACd,aAAa,OAAO,CAAC,aAAc,KAAK,SAAS,CAAC,IAElD,QAAQ,GAAG,CAAC,yBAA0B,EACxC,EAAG,EAAE,EAGL,CAAA,EAAA,EAAA,SAAA,AAAS,EAAC,KACJ,GAAc,OAAO,IAAI,CAAC,GAAY,MAAM,CAAG,GAAG,AACpD,aAAa,OAAO,CAAC,aAAc,KAAK,SAAS,CAAC,GAEtD,EAAG,CAAC,EAAW,EAGb,CAAA,EAAA,EAAA,GAAA,EAAC,EAAkB,QAAQ,CAAA,CAAC,MAAO,GAAc,CAAC,WAC/C,GAGP,EAEa,EAAgB,KAC3B,IAAM,EAAU,CAAA,EAAA,EAAA,UAAA,AAAU,EAAC,GAC3B,QAAgB,IAAZ,EACF,KADyB,CACnB,AAAI,MAAM,0DAElB,OAAO,CACT","ignoreList":[0,1,2]}